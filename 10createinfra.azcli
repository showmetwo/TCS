#!/bin/bash
source $(dirname $0)/00variable.sh

# Create resource group
az group create --name $rg_name -l $rg_location

# Create database. Basic sku doesn't support private link, please use GP
az postgres server create \
    --resource-group $rg_name \
    --name $db_server_name  \
    --location $rg_location \
    --admin-user $db_user \
    --admin-password $db_password \
    --ssl-enforcement Disabled \
    --sku-name GP_Gen5_2

# Create network
az network vnet create --name $vnet_name --resource-group $rg_name --subnet-name $subnet_name
az network vnet subnet update \
 --name $subnet_name \
 --resource-group $rg_name \
 --vnet-name $vnet_name \
 --disable-private-endpoint-network-policies true

# Create endpoint. Connection shouldn't re-route to internet
az network private-endpoint create \
    --name $private_endpoint_name \
    --resource-group $rg_name \
    --vnet-name $vnet_name  \
    --subnet $subnet_name \
    --private-connection-resource-id $(az resource show --resource-group $rg_name --name $db_server_name --resource-type "Microsoft.DBforPostgreSQL/servers" --query "id" -o tsv) \
    --group-id postgresqlServer \
    --connection-name myConnection

# Get private link IP, if you need use FQDN to access database, should create private zone and create A record point to private link IP
db_host=$(az network private-endpoint show --name $private_endpoint_name --resource-group $rg_name --query "customDnsConfigs[].ipAddresses[0]" -o tsv)
# Set real db username
db_user=$db_user'@'$db_server_name
# Input into key vault
az keyvault create --name $kv_name -g $rg_name
az keyvault secret set --vault-name $kv_name --name "DbUser" --value $db_user
az keyvault secret set --vault-name $kv_name --name "DbPassword" --value $db_password
az keyvault secret set --vault-name $kv_name --name "DbName" --value $db_name
az keyvault secret set --vault-name $kv_name --name "DbPort" --value $db_port
az keyvault secret set --vault-name $kv_name --name "DbHost" --value $db_host
az keyvault secret set --vault-name $kv_name --name "ListenHost" --value $app_listen_host
az keyvault secret set --vault-name $kv_name --name "ListenPort" --value $app_listen_port

# Create public IP
az network public-ip create \
    --resource-group $rg_name \
    --name $public_ip_name

# Create load balancer, probe and probe rule
az network lb create \
    --resource-group $rg_name \
    --name $lb_name \
    --public-ip-address $public_ip_name \
    --frontend-ip-name myFrontEnd \
    --backend-pool-name $lb_backendpool_name

az network lb probe create \
    --resource-group $rg_name \
    --lb-name $lb_name \
    --name $lb_probe_name \
    --protocol http \
    --port $app_listen_port \
    --path /healthcheck

az network lb rule create \
    --resource-group $rg_name \
    --lb-name $lb_name \
    --name myHTTPRule \
    --protocol tcp \
    --frontend-port 80 \
    --backend-port $app_listen_port \
    --frontend-ip-name myFrontEnd \
    --backend-pool-name $lb_backendpool_name \
    --probe-name $lb_probe_name

# Create network security group, allow internal access to port 80 and 22
az network nsg create --resource-group $rg_name --name $nsg_name
az network nsg rule create \
    --resource-group $rg_name \
    --nsg-name $nsg_name \
    --name http \
    --access allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 900 \
    --source-address-prefix "*" \
    --source-port-range "*" \
    --destination-address-prefix "*" \
    --destination-port-range $app_listen_port

az network nsg rule create \
    --resource-group $rg_name \
    --nsg-name $nsg_name \
    --name ssh \
    --access allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 890 \
    --source-address-prefix "*" \
    --source-port-range "*" \
    --destination-address-prefix "*" \
    --destination-port-range 22

# Create NIC
for i in `seq 1 2`; do
    az network nic create \
        --resource-group $rg_name \
        --name $nic_name$i \
        --vnet-name $vnet_name \
        --subnet $subnet_name \
        --network-security-group $nsg_name \
        --lb-name $lb_name \
        --lb-address-pools $lb_backendpool_name
done

# Create AS
az vm availability-set create \
    --resource-group $rg_name \
    --name $as_name

# Replace github with actual value
sed -i "s/{vm_user}/$vm_user/g" init.yaml
sed -i "s/{github_owner}/$github_owner/g" init.yaml
sed -i "s/{github_repo}/$github_repo/g" init.yaml
sed -i "s/{github_token}/$github_token/g" init.yaml

# Create vm with cloud init
for i in `seq 1 2`; do
    az vm create \
        --resource-group $rg_name \
        --name $vm_name$i \
        --availability-set $as_name \
        --nics $nic_name$i \
        --image UbuntuLTS \
        --admin-username $vm_user \
        --admin-password $vmss_password \
        --custom-data init.yaml
done
